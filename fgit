#!/bin/bash
# dependencies to run this script: gum

CONFIG=".fgitconfig"
CONFIG_FILE="$HOME/$CONFIG"
ACCEPT="yes"
DECLINE="no"
COLOR_GREEN="#ffff8f"
COLOR_PINK="#ff69b4"
COLOR_WHITE="#ffffff"

# create file where branch names and prefixes are stored if not already existing
touch "$CONFIG_FILE"

style_message() {
  gum style \
    --border="rounded" \
    --border-foreground=$COLOR_PINK \
    --bold \
    --foreground=$COLOR_WHITE \
    --margin="0 0" \
    "$1"
}

style_important() {
  gum style \
    --foreground=$COLOR_GREEN \
    "$1"
}

style_alert() {
  gum style \
    --foreground=$COLOR_PINK \
    "$1"
}

confirm () {
  gum choose \
    --header="$(style_message "$1")" \
    --cursor.foreground=$COLOR_GREEN \
    $ACCEPT $DECLINE
}

exit_create_branch () {
  style_message "$(style_alert "branch creation aborted")"
  exit 1
}

create_branch() {
  name=""
  ticket_nr=""
  keep_name=""

  prefix_message=$(style_message "branch prefix:")
  ticket_nr_message=$(style_message "ticket number: (leave empty if no ticket)")
  name_message=$(style_message "branch name:")

  prefix=$(gum choose \
    --header="$prefix_message" \
    --cursor="> " \
    --cursor.foreground=$COLOR_GREEN \
    "feature" "bugfix" "hotfix" "none"
  )

  # make sure the script can be exited by pressing control + c
  if [[ $? -ne 0 ]]; then
    exit_create_branch
  fi

  # allow editing the branch name by looping until the script terminates
  while [ "$keep_name" != "$ACCEPT" ]
  do
    ticket_nr=$(gum input \
      --header="$ticket_nr_message" \
      --placeholder="ABCD-1234" \
      --value="$ticket_nr"
    )

    # make sure the script can be exited by pressing control + c
    if [[ $? -ne 0 ]]; then
      exit_create_branch
    fi

    name=$(gum input \
      --header="$name_message" \
      --placeholder="what-ever-you-want" \
      --value="$name"
    )

    # make sure the script can be exited by pressing control + c
    if [[ $? -ne 0 ]] || [[ -z $name ]]; then
      exit_create_branch
    fi

    final_name="$name"

    if [[ -n $ticket_nr ]]; then
      final_name="$ticket_nr-$name"
    fi

    if [[ $prefix != "none" ]]; then
      final_name="$prefix/$final_name"
    fi

    keep_name=$(gum choose \
      --header="$(style_message "Keep branch: '$(style_important "$final_name")'?")" \
      --cursor.foreground=$COLOR_GREEN \
      $ACCEPT "edit" $DECLINE
    )

    # make sure the script can be exited by pressing control + c
    if [[ $? -ne 0 ]] || [[ -z $name ]]; then
      exit_create_branch
    fi

    if [[ $keep_name == "$ACCEPT" ]]; then
      # write branch name and ticket number to config file
      echo "$final_name|$ticket_nr" >> "$CONFIG_FILE"
      git checkout -b "$final_name"
    elif [[ $keep_name == "$DECLINE" ]]; then
      exit_create_branch
    fi
  done
}

exit_commit() {
  style_message "$(style_alert "commit aborted")"
  exit 1
}

commit_changes() {
  keep_message=""
  commit_message=""
  commit_message_message=$(style_message "commit message:")

  # get current branch name and get ticket number for branch
  current_branch_name=$(git rev-parse --abbrev-ref HEAD)
  file_content=$(grep -i "$current_branch_name" "$CONFIG_FILE")
  ticket_nr=$(echo "$file_content" | cut -d '|' -f 2)

  while [ "$keep_message" != "$ACCEPT" ] && [ "$keep_message" != "$DECLINE" ]
  do
    commit_message=$(gum input \
      --header="$commit_message_message" \
      --value="$commit_message"
    )

    # make sure the script can be exited by pressing control + c
    if [[ $? -ne 0 ]]; then
      exit_commit
    fi

    # prevent from adding the prefix multiple times
    if [[ -n $ticket_nr ]] && [[ ! "$commit_message" == "$ticket_nr"* ]]; then
      commit_message="$ticket_nr: $commit_message"
    fi

    keep_message=$(gum choose \
      --header="$(style_message "Keep message: '$(style_important "$commit_message")'?")" \
      --cursor.foreground=$COLOR_GREEN \
      $ACCEPT "edit" $DECLINE
    )

    # make sure the script can be exited by pressing control + c
    if [[ $? -ne 0 ]]; then
      exit_commit
    fi
  done

  if [[ $keep_message == "$ACCEPT" ]]; then
    git commit -m "$commit_message"
  else
    exit_commit
  fi
}

delete_branch() {
  current_branch_name=$(git rev-parse --abbrev-ref HEAD)

  if [[ $current_branch_name != "develop" ]]; then
    # try to checkout branch develop
    git checkout "develop" || {
      style_message "$(style_alert "something went wrong - failed to checkout branch develop")"
      exit 2
    }
  fi

  # get all branches except for develop and master, also remove * from current branch
  existing_branches=$(git branch | sed 's/^[* ]//' | sed "/develop/d" | sed "/master/d")

  if [[ -z $existing_branches ]]; then
    style_message "$(style_alert "no branches to delete")"
    exit 1
  fi

  linebreak=$'\n'
  hint="toggle selection using <SPACE> if multiple branches shown$linebreak<enter> to proceed"
  deletion_message=$(style_message "Choose branches for deletion$linebreak$hint")

  branches_to_delete=$(gum choose \
    --header="$deletion_message" \
    --cursor.foreground=$COLOR_GREEN \
    --cursor-prefix="[ ] " \
    --selected-prefix="[âœ“] " \
    --unselected-prefix="[ ] " \
    --no-limit \
    $existing_branches
  )

  if [[ -z $branches_to_delete ]]; then
    style_message "$(style_alert "no branches selected")"
    exit 1
  fi

  message=$'Delete following branches:\n'
  delete_branches=$(confirm "$message$(style_important "$branches_to_delete")")

  if [[ $delete_branches == "$ACCEPT" ]]; then
    git branch -d $branches_to_delete

    delimiter=$'\n'
    IFS="$delimiter" read -ra split_branches <<< $branches_to_delete

    for single_branch in $split_branches
    do
      # an alternative to "$OSTYPE" would be "$(uname)"
      if [[ "$OSTYPE" == "linux-gnu" ]]; then
        # use GNU sed on linux
        sed -i "\|$single_branch|d" $CONFIG_FILE
      elif [[ "$OSTYPE" == "darwin"* ]]; then
        # use BSD sed on mac
        sed -i "" "\|$single_branch|d" $CONFIG_FILE
      fi
    done
  fi
}

checkout_branch() {
  # remove current branch from selection
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  branches=$(git branch | sed "\|$current_branch|d")

  message=$(style_message "choose a branch to checkout:")

  branch_to_checkout=$(gum choose \
    --header="$message" \
    --cursor.foreground=$COLOR_GREEN \
    $branches
  )

  git checkout $branch_to_checkout
}

help() {
  style_message "no options provided, options are 'new', 'commit', 'delete', 'checkout'"
}

case $1 in
  "new")
    create_branch
    ;;
  "commit")
    commit_changes
    ;;
  "delete")
    delete_branch
    ;;
  "checkout")
    checkout_branch
    ;;
  *)
    help
    ;;
esac
